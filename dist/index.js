"use strict";(self.webpackChunkweb_gl_example=self.webpackChunkweb_gl_example||[]).push([[826],{689:()=>{function r(r,t,e){var o=function(r,t,e){var o=n(r,r.VERTEX_SHADER,t),i=n(r,r.FRAGMENT_SHADER,e);if(!o||!i)return null;var a=r.createProgram();if(!a)return null;if(r.attachShader(a,o),r.attachShader(a,i),r.linkProgram(a),!r.getProgramParameter(a,r.LINK_STATUS)){var c=r.getProgramInfoLog(a);return console.log("无法连接程序对象: 2 "+c),r.deleteProgram(a),r.deleteShader(i),r.deleteShader(o),null}return a}(r,t,e);return o?(r.useProgram(o),r.program=o,!0):(console.log("无法创建程序对象 1"),!1)}function n(r,n,t){var e=r.createShader(n);if(null==e)return console.log("无法创建着色器 3"),null;if(r.shaderSource(e,t),r.compileShader(e),!r.getShaderParameter(e,r.COMPILE_STATUS)){var o=r.getShaderInfoLog(e);return console.log("Failed to compile shader: 4"+o),r.deleteShader(e),null}return e}const t=r=>{r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT)};function e(r,n,t,e){return{x:(r-e.left-200)/200,y:-(n-e.top-200)/200,z:t}}const o=function(n,e){if(!r(n,"\n      attribute vec4 DynamicPosition;\n      void main() {\n          gl_Position = DynamicPosition;\n          gl_PointSize = 10.0;\n      }\n    ","\n      void main() {\n          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n      }\n    "))throw new Error("can not create program, please check your shader");const o=new Float32Array([.5,0,0,.5,-.5,0]),i=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,i),n.bufferData(n.ARRAY_BUFFER,o,n.STATIC_DRAW);const a=n.getAttribLocation(n.program,"DynamicPosition");n.vertexAttribPointer(a,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(a),t(n),n.drawArrays(e??n.POINTS,0,3)};function i(r){const n=r*Math.PI/180;return{sinB:Math.sin(n),cosB:Math.cos(n)}}const a=function(n,e){if(!r(n,"\n      attribute vec4 DynamicPosition;\n      attribute vec4 DynamicColor;\n      varying vec4 varyingColor;\n      void main() {\n          gl_Position = DynamicPosition;\n          gl_PointSize = 10.0;\n          varyingColor = DynamicColor;\n      }\n    ","\n      precision mediump float;\n      varying vec4 varyingColor;\n      void main() {\n          gl_FragColor = varyingColor;\n      }\n    "))throw new Error("can not create program, please check your shader");const o=new Float32Array([.5,0,1,0,0,0,.5,0,1,1,-.5,0,0,0,1]),i=o.BYTES_PER_ELEMENT,a=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,a),n.bufferData(n.ARRAY_BUFFER,o,n.STATIC_DRAW);const c=n.getAttribLocation(n.program,"DynamicPosition"),s=n.getAttribLocation(n.program,"DynamicColor");n.vertexAttribPointer(c,2,n.FLOAT,!1,5*i,0),n.enableVertexAttribArray(c),n.vertexAttribPointer(s,3,n.FLOAT,!1,5*i,2*i),n.enableVertexAttribArray(s),t(n),n.drawArrays(e||n.POINTS,0,3)};function c(r,n,e){const o=r.createTexture();r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,1),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,o),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR),r.texImage2D(r.TEXTURE_2D,0,r.RGB,r.RGB,r.UNSIGNED_BYTE,e);const i=r.getUniformLocation(r.program,"sampler");r.uniform1i(i,0),t(r),r.drawArrays(r.TRIANGLE_STRIP,0,4)}const s={clearBackground:t,point:function(n){if(!r(n,"\n      void main() {\n          gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n          gl_PointSize = 10.0;\n      }\n    ","\n      void main() {\n          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n      }\n    "))throw new Error("can not create program, please check your shader");t(n),n.drawArrays(n.POINTS,0,1)},clickPoint:function(n){if(!r(n,"\n      attribute vec4 DynamicPosition;\n      void main() {\n          gl_Position = DynamicPosition;\n          gl_PointSize = 10.0;\n      }\n    ","\n      void main() {\n          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n      }\n    "))throw new Error("can not create program, please check your shader");t(n),document.onclick=r=>{const o=n.getAttribLocation(n.program,"DynamicPosition"),i=e(r.clientX,r.clientY,0,n.canvas.getBoundingClientRect());n.vertexAttrib3f(o,i.x,i.y,i.z),t(n),n.drawArrays(n.POINTS,0,1)}},clickPoints:function(n){if(!r(n,"\n    attribute vec4 DynamicPosition;\n    void main() {\n        gl_Position = DynamicPosition;\n        gl_PointSize = 10.0;\n    }\n  ","\n    void main() {\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n  "))throw new Error("can not create program, please check your shader");t(n);const o=[];document.onclick=r=>{const i=n.getAttribLocation(n.program,"DynamicPosition"),a=e(r.clientX,r.clientY,0,n.canvas.getBoundingClientRect());o.push(a),t(n);for(let r=0;r<o.length;r++)n.vertexAttrib3f(i,o[r].x,o[r].y,o[r].z),n.drawArrays(n.POINTS,0,1)}},drawPointsUseBuffer:o,triangle:function(r){o(r,r.TRIANGLES)},rotateTriangleUseMatrix:function(n){if(!r(n,"\n        attribute vec4 OriginPosition;\n        uniform mat4 RotateMatrix;\n        void main() {\n            gl_Position = RotateMatrix * OriginPosition;\n        }\n    ","\n        void main() {\n            gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }\n    "))throw new Error("can not create program, please check your shader");t(n);const{cosB:e,sinB:o}=i(90),a=new Float32Array([e,o,0,0,-o,e,0,0,0,0,1,0,0,0,0,1]),c=new Float32Array([.5,0,0,.5,-.5,0]),s=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,c,n.STATIC_DRAW);const l=n.getAttribLocation(n.program,"OriginPosition");n.vertexAttribPointer(l,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(l);const g=n.getUniformLocation(n.program,"RotateMatrix");n.uniformMatrix4fv(g,!1,a),n.drawArrays(n.TRIANGLES,0,3)},rotateTriangleAnimation:function(n){if(!r(n,"\n        attribute vec4 OriginPosition;\n        uniform mat4 RotateMatrix;\n        void main() {\n            gl_Position = RotateMatrix * OriginPosition;\n        }\n    ","\n        void main() {\n            gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }\n    "))throw new Error("can not create program, please check your shader");t(n);const e=new Float32Array([.5,0,0,.5,-.5,0]),o=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,o),n.bufferData(n.ARRAY_BUFFER,e,n.STATIC_DRAW);const a=n.getAttribLocation(n.program,"OriginPosition"),c=n.getUniformLocation(n.program,"RotateMatrix");n.vertexAttribPointer(a,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(a);let s=Date.now(),l=0;!function r(){var e;e=function(){const r=Date.now(),n=r-s;s=r;const t=l+15*n/1e3;l=t;const{cosB:e,sinB:o}=i(t);return new Float32Array([e,o,0,0,-o,e,0,0,0,0,1,0,0,0,0,1])}(),n.uniformMatrix4fv(c,!1,e),t(n),n.drawArrays(n.TRIANGLES,0,3),requestAnimationFrame(r)}()},colorfulPoints:a,colorfulTriangle:r=>{a(r,r.TRIANGLES)},texture:function(n){if(!r(n,"\n        attribute vec4 pointsPosition;\n        attribute vec2 pointsTexture;\n        varying vec2 TextureCoord;\n        void main() {\n            gl_Position = pointsPosition;\n            TextureCoord = pointsTexture;\n        }\n    ","\n        precision mediump float;\n        varying vec2 TextureCoord;\n        uniform sampler2D sampler;\n        void main() {\n            gl_FragColor = texture2D(sampler, TextureCoord);\n        }\n    "))throw new Error("can not create program, please check your shader");t(n);const e=function(r){const n=new Float32Array([-.5,.5,0,1,-.5,-.5,0,0,.5,.5,1,1,.5,-.5,1,0]),t=n.BYTES_PER_ELEMENT,e=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,e),r.bufferData(r.ARRAY_BUFFER,n,r.STATIC_DRAW);const o=r.getAttribLocation(r.program,"pointsPosition");r.vertexAttribPointer(o,2,r.FLOAT,!1,4*t,0),r.enableVertexAttribArray(o);const i=r.getAttribLocation(r.program,"pointsTexture");return r.vertexAttribPointer(i,2,r.FLOAT,!1,4*t,2*t),r.enableVertexAttribArray(i),4}(n);!function(r,n,t){const e=new Image;e.onload=()=>t(r,n,e),e.src="./texture-6.jpg"}(n,e,c)}};!function(r){const n=document.getElementById("renderer-list");n.innerHTML="";for(const t of r){const r=document.createElement("li"),e=location.href.split("?")[0]+"?which="+t;r.innerHTML=`<a href="${e}"> ${t} </a>`,n.appendChild(r)}}(Object.keys(s));const l=s;class g{constructor(r,n){this.gl=r,this.whichExample=n.get("which")||"clearBackground"}render(){const r=l?.[this.whichExample];if(!r)throw new Error(`can not find renderer for ${this.whichExample}`);r(this.gl)}}window.onerror=function(r){console.error(r);const n=document.getElementById("show-error");n.innerHTML=r,n.style.color="red"},function(){const r=("canvas",document.getElementById("canvas").getContext("webgl"));if(!r)throw new Error("can not create webgl context");const n=new URLSearchParams(location.search);new g(r,n).render()}()}},r=>{r(r.s=689)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ekksRUFBSTZFLEVBQUdELEVBQ3JCLElOM0JPLFNBQTBCOEQsR0FDN0IsTUFBTUMsRUFBZXZDLFNBQVN3QyxlQUFlLGlCQUM3Q0QsRUFBYUUsVUFBWSxHQUN6QixJQUFLLE1BQU01QyxLQUFZeUMsRUFBTSxDQUN6QixNQUFNSSxFQUFLMUMsU0FBUzJDLGNBQWMsTUFDNUJDLEVBQU96RixTQUFTeUYsS0FBS0MsTUFBTSxLQUFLLEdBQUssVUFBWWhELEVBQ3ZENkMsRUFBR0QsVUFBWSxZQUFZRyxPQUFVL0MsU0FDckMwQyxFQUFhTyxZQUFZSixFQUM3QixDQUNKLENPUUFLLENBRHFCQyxPQUFPQyxLQUFLcEQsSUFHakMsVU05Qk8sTUFBTXFELEVBT1RDLFlBQVl2SixFQUFJd0osR0FDWkMsS0FBS3pKLEdBQUtBLEVBQ1Z5SixLQUFLQyxhQUFlRixFQUFNRyxJQUFJLFVBQVksaUJBQzlDLENBRUFDLFNBQ0ksTUFBTUEsRUFBUyxJQUFXSCxLQUFLQyxjQUMvQixJQUFLRSxFQUFRLE1BQU0sSUFBSTlHLE1BQU0sNkJBQTZCMkcsS0FBS0MsZ0JBQy9ERSxFQUFPSCxLQUFLekosR0FDaEIsRUNKSjZKLE9BQU9DLFFkVEEsU0FBbUJDLEdBQ3RCL0ksUUFBUUYsTUFBTWlKLEdBQ2QsTUFBTUMsRUFBVzVELFNBQVN3QyxlQUFlLGNBRXpDb0IsRUFBU25CLFVBQVlrQixFQUNyQkMsRUFBU0MsTUFBTUMsTUFBUSxLQUMzQixFY1BBLFdBQ0ksTUFBTWxLLEdBQXFCLFNkb0Jab0csU0FBU3dDLGVjcEJHLFVkcUJUdUIsV0FBVyxVY25CN0IsSUFBS25LLEVBQUksTUFBTSxJQUFJOEMsTUFBTSxnQ0FFekIsTUFBTTBHLEVBQVEsSUFBSVksZ0JBQWdCN0csU0FBUzhHLFFBQzNCLElBQUlmLEVBQVF0SixFQUFJd0osR0FDeEJJLFFBQ1osQ0FJQVUsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1nbC1leGFtcGxlLy4vc3JjL2luaXRTaGFkZXIuanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvY2xlYXJCYWNrZ3JvdW5kLmpzIiwid2VicGFjazovL3dlYi1nbC1leGFtcGxlLy4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvY2xpY2tQb2ludC5qcyIsIndlYnBhY2s6Ly93ZWItZ2wtZXhhbXBsZS8uL3NyYy9yZW5kZXJlci9kcmF3UG9pbnRzVXNlQnVmZmVyLmpzIiwid2VicGFjazovL3dlYi1nbC1leGFtcGxlLy4vc3JjL3JlbmRlcmVyL3V0aWxzLmpzIiwid2VicGFjazovL3dlYi1nbC1leGFtcGxlLy4vc3JjL3JlbmRlcmVyL3JvdGF0ZVRyaWFuZ2xlVXNlTWF0cml4LmpzIiwid2VicGFjazovL3dlYi1nbC1leGFtcGxlLy4vc3JjL3JlbmRlcmVyL2NvbG9yZnVsUG9pbnRzLmpzIiwid2VicGFjazovL3dlYi1nbC1leGFtcGxlLy4vc3JjL3JlbmRlcmVyL3RleHR1cmUuanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvY2xpY2tQb2ludHMuanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvdHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvcm90YXRlVHJpYW5nbGVBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vd2ViLWdsLWV4YW1wbGUvLi9zcmMvcmVuZGVyZXIvY29sb3JmdWxUcmlhbmdsZS5qcyIsIndlYnBhY2s6Ly93ZWItZ2wtZXhhbXBsZS8uL3NyYy9FeGFtcGxlLmpzIiwid2VicGFjazovL3dlYi1nbC1leGFtcGxlLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGUgYSBwcm9ncmFtIG9iamVjdCBhbmQgbWFrZSBjdXJyZW50XHJcbiAqIEBwYXJhbSBnbCBHTCBjb250ZXh0XHJcbiAqIEBwYXJhbSB2c2hhZGVyIGEgdmVydGV4IHNoYWRlciBwcm9ncmFtIChzdHJpbmcpXHJcbiAqIEBwYXJhbSBmc2hhZGVyIGEgZnJhZ21lbnQgc2hhZGVyIHByb2dyYW0gKHN0cmluZylcclxuICogQHJldHVybiB0cnVlLCBpZiB0aGUgcHJvZ3JhbSBvYmplY3Qgd2FzIGNyZWF0ZWQgYW5kIHN1Y2Nlc3NmdWxseSBtYWRlIGN1cnJlbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0U2hhZGVycyhnbCwgdnNoYWRlciwgZnNoYWRlcikge1xyXG4gICAgdmFyIHByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCB2c2hhZGVyLCBmc2hhZGVyKTtcclxuICAgIGlmICghcHJvZ3JhbSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi5peg5rOV5Yib5bu656iL5bqP5a+56LGhIDFcIik7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgICBnbC5wcm9ncmFtID0gcHJvZ3JhbTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSB0aGUgbGlua2VkIHByb2dyYW0gb2JqZWN0XHJcbiAqIEBwYXJhbSBnbCBHTCBjb250ZXh0XHJcbiAqIEBwYXJhbSB2c2hhZGVyIGEgdmVydGV4IHNoYWRlciBwcm9ncmFtIChzdHJpbmcpXHJcbiAqIEBwYXJhbSBmc2hhZGVyIGEgZnJhZ21lbnQgc2hhZGVyIHByb2dyYW0gKHN0cmluZylcclxuICogQHJldHVybiBjcmVhdGVkIHByb2dyYW0gb2JqZWN0LCBvciBudWxsIGlmIHRoZSBjcmVhdGlvbiBoYXMgZmFpbGVkXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVQcm9ncmFtKGdsLCB2c2hhZGVyLCBmc2hhZGVyKSB7XHJcbiAgICAvLyDliJvlu7rnnYDoibLlmajlr7nosaFcclxuICAgIHZhciB2ZXJ0ZXhTaGFkZXIgPSBsb2FkU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCB2c2hhZGVyKTtcclxuICAgIHZhciBmcmFnbWVudFNoYWRlciA9IGxvYWRTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgZnNoYWRlcik7XHJcbiAgICBpZiAoIXZlcnRleFNoYWRlciB8fCAhZnJhZ21lbnRTaGFkZXIpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliJvlu7rnqIvluo/lr7nosaFcclxuICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgaWYgKCFwcm9ncmFtKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5Li656iL5bqP5a+56LGh5YiG6YWN6aG254K5552A6Imy5Zmo5ZKM54mH5YWD552A6Imy5ZmoXHJcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XHJcblxyXG4gICAgLy8g6L+e5o6l552A6Imy5ZmoXHJcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgICAvLyDmo4Dmn6Xov57mjqVcclxuICAgIHZhciBsaW5rZWQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcclxuICAgIGlmICghbGlua2VkKSB7XHJcbiAgICAgICAgdmFyIGVycm9yID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLml6Dms5Xov57mjqXnqIvluo/lr7nosaE6IDIgXCIgKyBlcnJvcik7XHJcbiAgICAgICAgZ2wuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgICAgICBnbC5kZWxldGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xyXG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb2dyYW07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDliJvlu7rnnYDoibLlmajlr7nosaFcclxuICogQHBhcmFtIGdsIEdMIGNvbnRleHRcclxuICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgdGhlIHNoYWRlciBvYmplY3QgdG8gYmUgY3JlYXRlZFxyXG4gKiBAcGFyYW0gc291cmNlIHNoYWRlciBwcm9ncmFtIChzdHJpbmcpXHJcbiAqIEByZXR1cm4gY3JlYXRlZCBzaGFkZXIgb2JqZWN0LCBvciBudWxsIGlmIHRoZSBjcmVhdGlvbiBoYXMgZmFpbGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gbG9hZFNoYWRlcihnbCwgdHlwZSwgc291cmNlKSB7XHJcbiAgICAvLyDliJvlu7rnnYDoibLlmajlr7nosaFcclxuICAgIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XHJcbiAgICBpZiAoc2hhZGVyID09IG51bGwpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIuaXoOazleWIm+W7uuedgOiJsuWZqCAzXCIpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOiuvue9ruedgOiJsuWZqOa6kOS7o+eggVxyXG4gICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcclxuXHJcbiAgICAvLyDnvJbor5HnnYDoibLlmahcclxuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcclxuXHJcbiAgICAvLyDmo4Dmn6XnnYDoibLlmajnmoTnvJbor5HnirbmgIFcclxuICAgIHZhciBjb21waWxlZCA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcclxuICAgIGlmICghY29tcGlsZWQpIHtcclxuICAgICAgICB2YXIgZXJyb3IgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJGYWlsZWQgdG8gY29tcGlsZSBzaGFkZXI6IDRcIiArIGVycm9yKTtcclxuICAgICAgICBnbC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2hhZGVyO1xyXG59IiwiZXhwb3J0IGNvbnN0IGNsZWFyQmFja2dyb3VuZCA9IChnbCkgPT4ge1xyXG4gICAgZ2wuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAxLjApO1xyXG4gICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcbn07IiwiaW1wb3J0IHtcclxuICAgIENBTlZBU1xyXG59IGZyb20gXCIuL2NvbnN0YW50XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0Vycm9yKG1lc3NhZ2UpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XHJcbiAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hvdy1lcnJvclwiKTtcclxuXHJcbiAgICBlcnJvckRpdi5pbm5lckhUTUwgPSBtZXNzYWdlO1xyXG4gICAgZXJyb3JEaXYuc3R5bGUuY29sb3IgPSBcInJlZFwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd1JlbmRlcmVyTGlzdChsaXN0KSB7XHJcbiAgICBjb25zdCByZW5kZXJlckxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlbmRlcmVyLWxpc3RcIik7XHJcbiAgICByZW5kZXJlckxpc3QuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGZvciAoY29uc3QgcmVuZGVyZXIgb2YgbGlzdCkge1xyXG4gICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgICAgIGNvbnN0IGhyZWYgPSBsb2NhdGlvbi5ocmVmLnNwbGl0KFwiP1wiKVswXSArIFwiP3doaWNoPVwiICsgcmVuZGVyZXI7XHJcbiAgICAgICAgbGkuaW5uZXJIVE1MID0gYDxhIGhyZWY9XCIke2hyZWZ9XCI+ICR7cmVuZGVyZXJ9IDwvYT5gO1xyXG4gICAgICAgIHJlbmRlcmVyTGlzdC5hcHBlbmRDaGlsZChsaSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWJHTENvbnRleHQoZWxlbWVudElEKSB7XHJcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SUQpO1xyXG4gICAgY29uc3QgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpOyAvLyB0b2RvOiDlnKjov5nph4zmm7TmlrBDYW52YXPnmoTlpKflsI/vvIzogIPomZHlia/kvZznlKhcclxuICAgIHJldHVybiBnbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRDbGllbnRUb1dlYkdMUG9zaXRpb24oY2xpZW50WCwgY2xpZW50WSwgeiwgcmVjdCkge1xyXG4gICAgbGV0IHggPSAoKGNsaWVudFggLSByZWN0LmxlZnQpIC0gQ0FOVkFTLmhlaWdodCAvIDIpIC8gKENBTlZBUy5oZWlnaHQgLyAyKTtcclxuICAgIGxldCB5ID0gLSgoY2xpZW50WSAtIHJlY3QudG9wKSAtIENBTlZBUy53aWR0aCAvIDIpIC8gKENBTlZBUy53aWR0aCAvIDIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB4LFxyXG4gICAgICAgIHksXHJcbiAgICAgICAgelxyXG4gICAgfTtcclxufSIsImltcG9ydCB7IGluaXRTaGFkZXJzIH0gZnJvbSBcIi4uL2luaXRTaGFkZXJcIjtcclxuaW1wb3J0IHsgY29udmVydENsaWVudFRvV2ViR0xQb3NpdGlvbiB9IGZyb20gXCIuLi91dGlsXCI7XHJcbmltcG9ydCB7IGNsZWFyQmFja2dyb3VuZCB9IGZyb20gXCIuL2NsZWFyQmFja2dyb3VuZFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNsaWNrUG9pbnQgPSBmdW5jdGlvbiAoZ2wpIHtcclxuICAgIGNvbnN0IHBvaW50U2hhZGVyID0gYFxyXG4gICAgICBhdHRyaWJ1dGUgdmVjNCBEeW5hbWljUG9zaXRpb247XHJcbiAgICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICAgIGdsX1Bvc2l0aW9uID0gRHluYW1pY1Bvc2l0aW9uO1xyXG4gICAgICAgICAgZ2xfUG9pbnRTaXplID0gMTAuMDtcclxuICAgICAgfVxyXG4gICAgYDtcclxuXHJcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGBcclxuICAgICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApO1xyXG4gICAgICB9XHJcbiAgICBgO1xyXG5cclxuICAgIGlmICghaW5pdFNoYWRlcnMoZ2wsIHBvaW50U2hhZGVyLCBmcmFnbWVudFNoYWRlcikpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG5vdCBjcmVhdGUgcHJvZ3JhbSwgcGxlYXNlIGNoZWNrIHlvdXIgc2hhZGVyXCIpO1xyXG5cclxuICAgIGNsZWFyQmFja2dyb3VuZChnbCk7XHJcblxyXG4gICAgZG9jdW1lbnQub25jbGljayA9IGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBvaW50TG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihnbC5wcm9ncmFtLCBcIkR5bmFtaWNQb3NpdGlvblwiKTtcclxuICAgICAgICBjb25zdCBwb2ludCA9IGNvbnZlcnRDbGllbnRUb1dlYkdMUG9zaXRpb24oXHJcbiAgICAgICAgICAgIGUuY2xpZW50WCxcclxuICAgICAgICAgICAgZS5jbGllbnRZLFxyXG4gICAgICAgICAgICAwLjAsXHJcbiAgICAgICAgICAgIGdsLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYjNmKHBvaW50TG9jYXRpb24sIHBvaW50LngsIHBvaW50LnksIHBvaW50LnopO1xyXG5cclxuICAgICAgICBjbGVhckJhY2tncm91bmQoZ2wpO1xyXG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuUE9JTlRTLCAwLCAxKTtcclxuICAgIH07XHJcbn07IiwiaW1wb3J0IHtcclxuICAgIGluaXRTaGFkZXJzXHJcbn0gZnJvbSBcIi4uL2luaXRTaGFkZXJcIjtcclxuaW1wb3J0IHtcclxuICAgIGNsZWFyQmFja2dyb3VuZFxyXG59IGZyb20gXCIuL2NsZWFyQmFja2dyb3VuZFwiO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtkcmF3VHlwZV0g57uY55S755qE57G75Z6L77yM6buY6K6k5Li6UE9JTlRTXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZHJhd1BvaW50c1VzZUJ1ZmZlciA9IGZ1bmN0aW9uIChnbCwgZHJhd1R5cGUpIHtcclxuICAgIGNvbnN0IHBvaW50U2hhZGVyID0gYFxyXG4gICAgICBhdHRyaWJ1dGUgdmVjNCBEeW5hbWljUG9zaXRpb247XHJcbiAgICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICAgIGdsX1Bvc2l0aW9uID0gRHluYW1pY1Bvc2l0aW9uO1xyXG4gICAgICAgICAgZ2xfUG9pbnRTaXplID0gMTAuMDtcclxuICAgICAgfVxyXG4gICAgYDtcclxuXHJcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGBcclxuICAgICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApO1xyXG4gICAgICB9XHJcbiAgICBgO1xyXG5cclxuICAgIGlmICghaW5pdFNoYWRlcnMoZ2wsIHBvaW50U2hhZGVyLCBmcmFnbWVudFNoYWRlcikpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG5vdCBjcmVhdGUgcHJvZ3JhbSwgcGxlYXNlIGNoZWNrIHlvdXIgc2hhZGVyXCIpO1xyXG5cclxuICAgIGNvbnN0IHBvaW50cyA9IG5ldyBGbG9hdDMyQXJyYXkoWzAuNSwgMC4wLCAwLjAsIDAuNSwgLTAuNSwgMC4wXSk7XHJcbiAgICBjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcclxuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBwb2ludHMsIGdsLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKGdsLnByb2dyYW0sIFwiRHluYW1pY1Bvc2l0aW9uXCIpO1xyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uKTtcclxuICAgIFxyXG4gICAgY2xlYXJCYWNrZ3JvdW5kKGdsKTtcclxuICAgIGdsLmRyYXdBcnJheXMoZHJhd1R5cGUgPz8gZ2wuUE9JTlRTLCAwLCAzKTtcclxufTsiLCIvKipcclxuICogYE1hdGguc2luL2Nvc2AgdXNlIHJhZGlhbnMsIGJ1dCB3ZSB1c2UgZGVncmVlcy4gXHJcbiAqIFRoZSBmdW5jdGlvbiBjYW4gY2FjdWxhdGUgdGhlIHNpbi9jb3Mgb2YgZGVncmVlcy5cclxuICogQHBhcmFtIHtudW1iZXJ9IGRlZ3JlZVxyXG4gKiBAcmV0dXJucyBzaW4oZGVncmVlKSwgY29zKGRlZ3JlZSlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBcmMoZGVncmVlKSB7XHJcbiAgICBjb25zdCByYWQgPSBkZWdyZWUgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzaW5COiBNYXRoLnNpbihyYWQpLFxyXG4gICAgICAgIGNvc0I6IE1hdGguY29zKHJhZClcclxuICAgIH07XHJcbn0iLCJpbXBvcnQge1xyXG4gICAgaW5pdFNoYWRlcnNcclxufSBmcm9tIFwiLi4vaW5pdFNoYWRlclwiO1xyXG5pbXBvcnQge1xyXG4gICAgY2xlYXJCYWNrZ3JvdW5kXHJcbn0gZnJvbSBcIi4vY2xlYXJCYWNrZ3JvdW5kXCI7XHJcbmltcG9ydCB7IGdldEFyYyB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBcclxuICovXHJcbmV4cG9ydCBjb25zdCByb3RhdGVUcmlhbmdsZVVzZU1hdHJpeCA9IGZ1bmN0aW9uIChnbCkge1xyXG4gICAgY29uc3QgcG9pbnRTaGFkZXIgPSBgXHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzQgT3JpZ2luUG9zaXRpb247XHJcbiAgICAgICAgdW5pZm9ybSBtYXQ0IFJvdGF0ZU1hdHJpeDtcclxuICAgICAgICB2b2lkIG1haW4oKSB7XHJcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gUm90YXRlTWF0cml4ICogT3JpZ2luUG9zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgYDtcclxuXHJcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGBcclxuICAgICAgICB2b2lkIG1haW4oKSB7XHJcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoMS4wLCAwLjAsIDAuMCwgMS4wKTtcclxuICAgICAgICB9XHJcbiAgICBgO1xyXG5cclxuICAgIGlmICghaW5pdFNoYWRlcnMoZ2wsIHBvaW50U2hhZGVyLCBmcmFnbWVudFNoYWRlcikpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG5vdCBjcmVhdGUgcHJvZ3JhbSwgcGxlYXNlIGNoZWNrIHlvdXIgc2hhZGVyXCIpO1xyXG5cclxuICAgIGNsZWFyQmFja2dyb3VuZChnbCk7XHJcblxyXG4gICAgY29uc3Qge2Nvc0IsIHNpbkJ9ID0gZ2V0QXJjKDkwKTtcclxuXHJcbiAgICBjb25zdCByb3RhdGVNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgICAgICBjb3NCLCBzaW5CLCAwLCAwLFxyXG4gICAgICAgIC1zaW5CLCBjb3NCLCAwLCAwLFxyXG4gICAgICAgIDAsIDAsIDEsIDAsXHJcbiAgICAgICAgMCwgMCwgMCwgMSxcclxuICAgIF0pO1xyXG5cclxuICAgIGNvbnN0IHBvaW50cyA9IG5ldyBGbG9hdDMyQXJyYXkoWzAuNSwgMC4wLCAwLjAsIDAuNSwgLTAuNSwgMC4wXSk7XHJcbiAgICBjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcclxuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBwb2ludHMsIGdsLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICBjb25zdCBhdHRyaWJ1dGVMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKGdsLnByb2dyYW0sIFwiT3JpZ2luUG9zaXRpb25cIik7XHJcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYnV0ZUxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cmlidXRlTG9jYXRpb24pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihnbC5wcm9ncmFtLCBcIlJvdGF0ZU1hdHJpeFwiKTtcclxuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodW5pZm9ybUxvY2F0aW9uLCBmYWxzZSwgcm90YXRlTWF0cml4KTtcclxuICAgIFxyXG4gICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDMpO1xyXG59OyIsImltcG9ydCB7XHJcbiAgICBpbml0U2hhZGVyc1xyXG59IGZyb20gXCIuLi9pbml0U2hhZGVyXCI7XHJcbmltcG9ydCB7XHJcbiAgICBjbGVhckJhY2tncm91bmRcclxufSBmcm9tIFwiLi9jbGVhckJhY2tncm91bmRcIjtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcclxuICogQHBhcmFtICB7bnVtYmVyfSBbZHJhd1R5cGVdIOe7mOeUu+eahOexu+Wei++8jOm7mOiupOS4ulBPSU5UU1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbG9yZnVsUG9pbnRzID0gZnVuY3Rpb24gKGdsLCBkcmF3VHlwZSkge1xyXG4gICAgY29uc3QgcG9pbnRTaGFkZXIgPSBgXHJcbiAgICAgIGF0dHJpYnV0ZSB2ZWM0IER5bmFtaWNQb3NpdGlvbjtcclxuICAgICAgYXR0cmlidXRlIHZlYzQgRHluYW1pY0NvbG9yO1xyXG4gICAgICB2YXJ5aW5nIHZlYzQgdmFyeWluZ0NvbG9yO1xyXG4gICAgICB2b2lkIG1haW4oKSB7XHJcbiAgICAgICAgICBnbF9Qb3NpdGlvbiA9IER5bmFtaWNQb3NpdGlvbjtcclxuICAgICAgICAgIGdsX1BvaW50U2l6ZSA9IDEwLjA7XHJcbiAgICAgICAgICB2YXJ5aW5nQ29sb3IgPSBEeW5hbWljQ29sb3I7XHJcbiAgICAgIH1cclxuICAgIGA7XHJcblxyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBgXHJcbiAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xyXG4gICAgICB2YXJ5aW5nIHZlYzQgdmFyeWluZ0NvbG9yO1xyXG4gICAgICB2b2lkIG1haW4oKSB7XHJcbiAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2YXJ5aW5nQ29sb3I7XHJcbiAgICAgIH1cclxuICAgIGA7XHJcblxyXG4gICAgaWYgKCFpbml0U2hhZGVycyhnbCwgcG9pbnRTaGFkZXIsIGZyYWdtZW50U2hhZGVyKSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW4gbm90IGNyZWF0ZSBwcm9ncmFtLCBwbGVhc2UgY2hlY2sgeW91ciBzaGFkZXJcIik7XHJcblxyXG4gICAgY29uc3QgcG9pbnRzID0gbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgICAgMC41LCAwLjAsIDEuMCwgMC4wLCAwLjAsXHJcbiAgICAgICAgMC4wLCAwLjUsIDAuMCwgMS4wLCAxLjAsXHJcbiAgICAgICAgLTAuNSwgMC4wLCAwLjAsIDAuMCwgMS4wLFxyXG4gICAgXSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHBlclBvaW50U2l6ZSA9IHBvaW50cy5CWVRFU19QRVJfRUxFTUVOVDtcclxuXHJcbiAgICBjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcclxuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBwb2ludHMsIGdsLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvbkxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oZ2wucHJvZ3JhbSwgXCJEeW5hbWljUG9zaXRpb25cIik7XHJcbiAgICBjb25zdCBjb2xvckxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oZ2wucHJvZ3JhbSwgXCJEeW5hbWljQ29sb3JcIik7XHJcblxyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIHBlclBvaW50U2l6ZSAqIDUsIDApO1xyXG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zaXRpb25Mb2NhdGlvbik7XHJcblxyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihjb2xvckxvY2F0aW9uLCAzLCBnbC5GTE9BVCwgZmFsc2UsIHBlclBvaW50U2l6ZSAqIDUsIHBlclBvaW50U2l6ZSAqIDIpO1xyXG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoY29sb3JMb2NhdGlvbik7XHJcblxyXG4gICAgY2xlYXJCYWNrZ3JvdW5kKGdsKTtcclxuICAgIGdsLmRyYXdBcnJheXMoZHJhd1R5cGUgfHwgZ2wuUE9JTlRTLCAwLCAzKTtcclxufTsiLCJpbXBvcnQge1xyXG4gICAgaW5pdFNoYWRlcnNcclxufSBmcm9tIFwiLi4vaW5pdFNoYWRlclwiO1xyXG5pbXBvcnQge1xyXG4gICAgY2xlYXJCYWNrZ3JvdW5kXHJcbn0gZnJvbSBcIi4vY2xlYXJCYWNrZ3JvdW5kXCI7XHJcblxyXG4vKipcclxuICog57q555CG6LS05Zu+XHJcbiAqIOatpOWkhOmcgOimgTE6MeS4lOS4uiAyICoqIG4g5YOP57Sg55qE5Zu+54mHXHJcbiAqIEBwYXJhbSB7V2ViR0wyUmVuZGVyaW5nQ29udGV4dH0gZ2wgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdGV4dHVyZSA9IGZ1bmN0aW9uIChnbCkge1xyXG4gICAgY29uc3QgcG9pbnRTaGFkZXIgPSBgXHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzQgcG9pbnRzUG9zaXRpb247XHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzIgcG9pbnRzVGV4dHVyZTtcclxuICAgICAgICB2YXJ5aW5nIHZlYzIgVGV4dHVyZUNvb3JkO1xyXG4gICAgICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSBwb2ludHNQb3NpdGlvbjtcclxuICAgICAgICAgICAgVGV4dHVyZUNvb3JkID0gcG9pbnRzVGV4dHVyZTtcclxuICAgICAgICB9XHJcbiAgICBgO1xyXG5cclxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gYFxyXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xyXG4gICAgICAgIHZhcnlpbmcgdmVjMiBUZXh0dXJlQ29vcmQ7XHJcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgc2FtcGxlcjtcclxuICAgICAgICB2b2lkIG1haW4oKSB7XHJcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChzYW1wbGVyLCBUZXh0dXJlQ29vcmQpO1xyXG4gICAgICAgIH1cclxuICAgIGA7XHJcblxyXG4gICAgaWYgKCFpbml0U2hhZGVycyhnbCwgcG9pbnRTaGFkZXIsIGZyYWdtZW50U2hhZGVyKSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW4gbm90IGNyZWF0ZSBwcm9ncmFtLCBwbGVhc2UgY2hlY2sgeW91ciBzaGFkZXJcIik7XHJcblxyXG4gICAgY2xlYXJCYWNrZ3JvdW5kKGdsKTtcclxuXHJcbiAgICBjb25zdCBuID0gc2V0UG9pbnRzUG9zaXRpb24oZ2wpO1xyXG4gICAgbG9hZEltYWdlKGdsLCBuLCBsb2FkVGV4dHVyZSk7XHJcbn07XHJcblxyXG4vKipcclxuICog6K6+572u54K555qE5L2N572uXHJcbiAqIEBwYXJhbSB7V2ViR0wyUmVuZGVyaW5nQ29udGV4dH0gZ2wgXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IOeCueS9jeS4quaVsFxyXG4gKi9cclxuZnVuY3Rpb24gc2V0UG9pbnRzUG9zaXRpb24oZ2wpIHtcclxuICAgIGNvbnN0IHBvaW50c01hcCA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICAgIC0wLjUsICAwLjUsIDAuMCwgMS4wLFxyXG4gICAgICAgIC0wLjUsIC0wLjUsIDAuMCwgMC4wLFxyXG4gICAgICAgIDAuNSwgICAwLjUsIDEuMCwgMS4wLFxyXG4gICAgICAgIDAuNSwgIC0wLjUsIDEuMCwgMC4wLFxyXG4gICAgXSk7XHJcbiAgICBjb25zdCBQRVJfRUxFTUVOVF9TSVpFID0gcG9pbnRzTWFwLkJZVEVTX1BFUl9FTEVNRU5UO1xyXG4gICAgY29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcblxyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XHJcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgcG9pbnRzTWFwLCBnbC5TVEFUSUNfRFJBVyk7XHJcblxyXG4gICAgY29uc3QgYXR0cmlidXRlTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihnbC5wcm9ncmFtLCBcInBvaW50c1Bvc2l0aW9uXCIpO1xyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBQRVJfRUxFTUVOVF9TSVpFICogNCwgMCk7XHJcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGVMb2NhdGlvbik7XHJcblxyXG4gICAgY29uc3QgdGV4dHVyZUxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oZ2wucHJvZ3JhbSwgXCJwb2ludHNUZXh0dXJlXCIpO1xyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0ZXh0dXJlTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgUEVSX0VMRU1FTlRfU0laRSAqIDQsIFBFUl9FTEVNRU5UX1NJWkUgKiAyKTtcclxuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRleHR1cmVMb2NhdGlvbik7XHJcblxyXG4gICAgcmV0dXJuIDQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlvILmraXliqDovb3lm77niYdcclxuICogQHBhcmFtIHtXZWJHTDJSZW5kZXJpbmdDb250ZXh0fSBnbCBcclxuICogQHBhcmFtIHtudW1iZXJ9IG5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICovXHJcbmZ1bmN0aW9uIGxvYWRJbWFnZShnbCwgbiwgY2FsbGJhY2spIHtcclxuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiBjYWxsYmFjayhnbCwgbiwgaW1hZ2UpO1xyXG4gICAgaW1hZ2Uuc3JjID0gXCIuL3RleHR1cmUtNi5qcGdcIjtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWKoOi9vee6ueeQhlxyXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuXHJcbiAqIEBwYXJhbSB7SW1hZ2V9IGltYWdlXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2FkVGV4dHVyZShnbCwgbiwgaW1hZ2UpIHtcclxuICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XHJcblxyXG4gICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgMSk7XHJcblxyXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcclxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xyXG5cclxuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCLCBnbC5SR0IsIGdsLlVOU0lHTkVEX0JZVEUsIGltYWdlKTtcclxuXHJcbiAgICBjb25zdCBzYW1wbGVyTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oZ2wucHJvZ3JhbSwgXCJzYW1wbGVyXCIpO1xyXG4gICAgZ2wudW5pZm9ybTFpKHNhbXBsZXJMb2NhdGlvbiwgMCk7XHJcblxyXG4gICAgY2xlYXJCYWNrZ3JvdW5kKGdsKTtcclxuXHJcbiAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcclxufSIsImltcG9ydCB7IHBvaW50IH0gZnJvbSBcIi4vcG9pbnRcIjtcclxuaW1wb3J0IHsgY2xlYXJCYWNrZ3JvdW5kIH0gZnJvbSBcIi4vY2xlYXJCYWNrZ3JvdW5kXCI7XHJcbmltcG9ydCB7IGNsaWNrUG9pbnQgfSBmcm9tIFwiLi9jbGlja1BvaW50XCI7XHJcbmltcG9ydCB7IGNsaWNrUG9pbnRzIH0gZnJvbSBcIi4vY2xpY2tQb2ludHNcIjtcclxuaW1wb3J0IHsgc2hvd1JlbmRlcmVyTGlzdCB9IGZyb20gXCIuLi91dGlsXCI7XHJcbmltcG9ydCB7IGRyYXdQb2ludHNVc2VCdWZmZXIgfSBmcm9tIFwiLi9kcmF3UG9pbnRzVXNlQnVmZmVyXCI7XHJcbmltcG9ydCB7IHRyaWFuZ2xlIH0gZnJvbSBcIi4vdHJpYW5nbGVcIjtcclxuaW1wb3J0IHsgcm90YXRlVHJpYW5nbGVVc2VNYXRyaXggfSBmcm9tIFwiLi9yb3RhdGVUcmlhbmdsZVVzZU1hdHJpeFwiO1xyXG5pbXBvcnQgeyByb3RhdGVUcmlhbmdsZUFuaW1hdGlvbiB9IGZyb20gXCIuL3JvdGF0ZVRyaWFuZ2xlQW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IGNvbG9yZnVsUG9pbnRzIH0gZnJvbSBcIi4vY29sb3JmdWxQb2ludHNcIjtcclxuaW1wb3J0IHsgY29sb3JmdWxUcmlhbmdsZSB9IGZyb20gXCIuL2NvbG9yZnVsVHJpYW5nbGVcIjtcclxuaW1wb3J0IHsgdGV4dHVyZSB9IGZyb20gXCIuL3RleHR1cmVcIjtcclxuXHJcblxyXG5jb25zdCByZW5kZXJlciA9IHtcclxuICAgIGNsZWFyQmFja2dyb3VuZCxcclxuICAgIHBvaW50LFxyXG4gICAgY2xpY2tQb2ludCxcclxuICAgIGNsaWNrUG9pbnRzLFxyXG4gICAgZHJhd1BvaW50c1VzZUJ1ZmZlcixcclxuICAgIHRyaWFuZ2xlLFxyXG4gICAgcm90YXRlVHJpYW5nbGVVc2VNYXRyaXgsXHJcbiAgICByb3RhdGVUcmlhbmdsZUFuaW1hdGlvbixcclxuICAgIGNvbG9yZnVsUG9pbnRzLFxyXG4gICAgY29sb3JmdWxUcmlhbmdsZSxcclxuICAgIHRleHR1cmVcclxufTtcclxuXHJcbmNvbnN0IHJlbmRlcmVyTGlzdCA9IE9iamVjdC5rZXlzKHJlbmRlcmVyKTtcclxuc2hvd1JlbmRlcmVyTGlzdChyZW5kZXJlckxpc3QpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyZXI7IiwiaW1wb3J0IHsgaW5pdFNoYWRlcnMgfSBmcm9tIFwiLi4vaW5pdFNoYWRlclwiO1xyXG5pbXBvcnQgeyBjbGVhckJhY2tncm91bmQgfSBmcm9tIFwiLi9jbGVhckJhY2tncm91bmRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwb2ludCA9IGZ1bmN0aW9uKGdsKSB7XHJcbiAgICBjb25zdCBwb2ludFNoYWRlciA9IGBcclxuICAgICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgICAgZ2xfUG9zaXRpb24gPSB2ZWM0KDAuMCwgMC4wLCAwLjAsIDEuMCk7XHJcbiAgICAgICAgICBnbF9Qb2ludFNpemUgPSAxMC4wO1xyXG4gICAgICB9XHJcbiAgICBgO1xyXG5cclxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gYFxyXG4gICAgICB2b2lkIG1haW4oKSB7XHJcbiAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCwgMC4wLCAwLjAsIDEuMCk7XHJcbiAgICAgIH1cclxuICAgIGA7XHJcblxyXG4gICAgaWYgKCFpbml0U2hhZGVycyhnbCwgcG9pbnRTaGFkZXIsIGZyYWdtZW50U2hhZGVyKSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW4gbm90IGNyZWF0ZSBwcm9ncmFtLCBwbGVhc2UgY2hlY2sgeW91ciBzaGFkZXJcIik7XHJcblxyXG4gICAgY2xlYXJCYWNrZ3JvdW5kKGdsKTtcclxuXHJcbiAgICBnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgMSk7XHJcbn07IiwiaW1wb3J0IHtcclxuICAgIGluaXRTaGFkZXJzXHJcbn0gZnJvbSBcIi4uL2luaXRTaGFkZXJcIjtcclxuaW1wb3J0IHtcclxuICAgIGNvbnZlcnRDbGllbnRUb1dlYkdMUG9zaXRpb25cclxufSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQge1xyXG4gICAgY2xlYXJCYWNrZ3JvdW5kXHJcbn0gZnJvbSBcIi4vY2xlYXJCYWNrZ3JvdW5kXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY2xpY2tQb2ludHMgPSBmdW5jdGlvbiAoZ2wpIHtcclxuICAgIGNvbnN0IHBvaW50U2hhZGVyID0gYFxyXG4gICAgYXR0cmlidXRlIHZlYzQgRHluYW1pY1Bvc2l0aW9uO1xyXG4gICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgIGdsX1Bvc2l0aW9uID0gRHluYW1pY1Bvc2l0aW9uO1xyXG4gICAgICAgIGdsX1BvaW50U2l6ZSA9IDEwLjA7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGBcclxuICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCwgMC4wLCAwLjAsIDEuMCk7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgICBpZiAoIWluaXRTaGFkZXJzKGdsLCBwb2ludFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbiBub3QgY3JlYXRlIHByb2dyYW0sIHBsZWFzZSBjaGVjayB5b3VyIHNoYWRlclwiKTtcclxuXHJcbiAgICBjbGVhckJhY2tncm91bmQoZ2wpO1xyXG5cclxuICAgIGNvbnN0IGNsaWNrZWRQb2ludHMgPSBbXTtcclxuXHJcbiAgICBkb2N1bWVudC5vbmNsaWNrID0gKGUpID0+IHtcclxuICAgICAgICBjb25zdCBwb2ludExvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oZ2wucHJvZ3JhbSwgXCJEeW5hbWljUG9zaXRpb25cIik7XHJcbiAgICAgICAgY29uc3QgcG9pbnQgPSBjb252ZXJ0Q2xpZW50VG9XZWJHTFBvc2l0aW9uKFxyXG4gICAgICAgICAgICBlLmNsaWVudFgsXHJcbiAgICAgICAgICAgIGUuY2xpZW50WSxcclxuICAgICAgICAgICAgMC4wLFxyXG4gICAgICAgICAgICBnbC5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjbGlja2VkUG9pbnRzLnB1c2gocG9pbnQpO1xyXG4gICAgICAgIGNsZWFyQmFja2dyb3VuZChnbCk7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPGNsaWNrZWRQb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliM2YocG9pbnRMb2NhdGlvbiwgY2xpY2tlZFBvaW50c1tpXS54LCBjbGlja2VkUG9pbnRzW2ldLnksIGNsaWNrZWRQb2ludHNbaV0ueik7XHJcbiAgICAgICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuUE9JTlRTLCAwLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59OyIsImltcG9ydCB7IGRyYXdQb2ludHNVc2VCdWZmZXIgfSBmcm9tIFwiLi9kcmF3UG9pbnRzVXNlQnVmZmVyXCI7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBcclxuICovXHJcbmV4cG9ydCBjb25zdCB0cmlhbmdsZSA9IGZ1bmN0aW9uKGdsKSB7XHJcbiAgICBkcmF3UG9pbnRzVXNlQnVmZmVyKGdsLCBnbC5UUklBTkdMRVMpO1xyXG59OyIsImltcG9ydCB7XHJcbiAgICBpbml0U2hhZGVyc1xyXG59IGZyb20gXCIuLi9pbml0U2hhZGVyXCI7XHJcbmltcG9ydCB7XHJcbiAgICBjbGVhckJhY2tncm91bmRcclxufSBmcm9tIFwiLi9jbGVhckJhY2tncm91bmRcIjtcclxuaW1wb3J0IHsgZ2V0QXJjIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJvdGF0ZVRyaWFuZ2xlQW5pbWF0aW9uID0gZnVuY3Rpb24gKGdsKSB7XHJcbiAgICBjb25zdCBwb2ludFNoYWRlciA9IGBcclxuICAgICAgICBhdHRyaWJ1dGUgdmVjNCBPcmlnaW5Qb3NpdGlvbjtcclxuICAgICAgICB1bmlmb3JtIG1hdDQgUm90YXRlTWF0cml4O1xyXG4gICAgICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSBSb3RhdGVNYXRyaXggKiBPcmlnaW5Qb3NpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICBgO1xyXG5cclxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gYFxyXG4gICAgICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApO1xyXG4gICAgICAgIH1cclxuICAgIGA7XHJcblxyXG4gICAgaWYgKCFpbml0U2hhZGVycyhnbCwgcG9pbnRTaGFkZXIsIGZyYWdtZW50U2hhZGVyKSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW4gbm90IGNyZWF0ZSBwcm9ncmFtLCBwbGVhc2UgY2hlY2sgeW91ciBzaGFkZXJcIik7XHJcblxyXG4gICAgY2xlYXJCYWNrZ3JvdW5kKGdsKTtcclxuXHJcbiAgICAvLyDln7rnoYDlm77lvaJcclxuICAgIGNvbnN0IHBvaW50cyA9IG5ldyBGbG9hdDMyQXJyYXkoWzAuNSwgMC4wLCAwLjAsIDAuNSwgLTAuNSwgMC4wXSk7XHJcbiAgICBjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcclxuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBwb2ludHMsIGdsLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICBjb25zdCBhdHRyaWJ1dGVMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKGdsLnByb2dyYW0sIFwiT3JpZ2luUG9zaXRpb25cIik7XHJcbiAgICBjb25zdCB1bmlmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oZ2wucHJvZ3JhbSwgXCJSb3RhdGVNYXRyaXhcIik7XHJcblxyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcclxuXHJcbiAgICBjb25zdCBkZWdyZWVTdGVwID0gMTUuMDsgXHJcbiAgICBsZXQgbGFzdFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgbGV0IGN1cnJlbnREZWdyZWUgPSAwLjA7XHJcblxyXG4gICAgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcclxuICAgICAgICBkcmF3KGdldE5leHRGcmFtZSgpKTtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICB9XHJcbiAgICBhbmltYXRlKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0TmV4dEZyYW1lKCkge1xyXG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgZGVsdGEgPSBub3cgLSBsYXN0VGltZTtcclxuICAgICAgICBsYXN0VGltZSA9IG5vdztcclxuICAgICAgICBjb25zdCBkZWdyZWUgPSBjdXJyZW50RGVncmVlICsgZGVncmVlU3RlcCAqIGRlbHRhIC8gMTAwMCA7XHJcbiAgICAgICAgY3VycmVudERlZ3JlZSA9IGRlZ3JlZTtcclxuXHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICBjb3NCLFxyXG4gICAgICAgICAgICBzaW5CXHJcbiAgICAgICAgfSA9IGdldEFyYyhkZWdyZWUpO1xyXG5cclxuICAgICAgICBjb25zdCByb3RhdGVNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgICAgICAgICAgY29zQiwgc2luQiwgMCwgMCxcclxuICAgICAgICAgICAgLXNpbkIsIGNvc0IsIDAsIDAsXHJcbiAgICAgICAgICAgIDAsIDAsIDEsIDAsXHJcbiAgICAgICAgICAgIDAsIDAsIDAsIDEsXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgcmV0dXJuIHJvdGF0ZU1hdHJpeDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkcmF3KHJvdGF0ZU1hdHJpeCkge1xyXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodW5pZm9ybUxvY2F0aW9uLCBmYWxzZSwgcm90YXRlTWF0cml4KTtcclxuICAgICAgICBjbGVhckJhY2tncm91bmQoZ2wpO1xyXG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCAzKTtcclxuICAgIH1cclxufTsiLCJpbXBvcnQgeyBjb2xvcmZ1bFBvaW50cyB9IGZyb20gXCIuL2NvbG9yZnVsUG9pbnRzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY29sb3JmdWxUcmlhbmdsZSA9IChnbCkgPT4ge1xyXG4gICAgY29sb3JmdWxQb2ludHMoZ2wsIGdsLlRSSUFOR0xFUyk7XHJcbn07IiwiaW1wb3J0IHJlbmRlcmVyIGZyb20gXCIuL3JlbmRlcmVyL2luZGV4XCI7XHJcbmV4cG9ydCBjbGFzcyBFeGFtcGxlIHtcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge1dlYkdMMlJlbmRlcmluZ0NvbnRleHR9IGdsIFxyXG4gICAgICogQHBhcmFtIHtVUkxTZWFyY2hQYXJhbXN9IHF1ZXJ5IFxyXG4gICAgICogQHRvZG8g5bCG6L+Z5Liq57G75pS56YCg5oiQ5Ye95pWwXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGdsLCBxdWVyeSkge1xyXG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgICAgICB0aGlzLndoaWNoRXhhbXBsZSA9IHF1ZXJ5LmdldChcIndoaWNoXCIpIHx8IFwiY2xlYXJCYWNrZ3JvdW5kXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHJlbmRlciA9IHJlbmRlcmVyPy5bdGhpcy53aGljaEV4YW1wbGVdO1xyXG4gICAgICAgIGlmICghcmVuZGVyKSB0aHJvdyBuZXcgRXJyb3IoYGNhbiBub3QgZmluZCByZW5kZXJlciBmb3IgJHt0aGlzLndoaWNoRXhhbXBsZX1gKTtcclxuICAgICAgICByZW5kZXIodGhpcy5nbCk7IC8vIGZpeGVkOiDlj5bmtojkuoZ0aGlz55qE5YWz6IGU5oCnXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4vRXhhbXBsZVwiOyBcclxuaW1wb3J0IHsgc2hvd0Vycm9yLCBnZXRXZWJHTENvbnRleHQgfSBmcm9tIFwiLi91dGlsXCI7XHJcblxyXG5mdW5jdGlvbiBtYWluKCkge1xyXG4gICAgY29uc3QgZ2wgPSBnZXRXZWJHTENvbnRleHQoXCJjYW52YXNcIik7XHJcblxyXG4gICAgaWYgKCFnbCkgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG5vdCBjcmVhdGUgd2ViZ2wgY29udGV4dFwiKTtcclxuICAgIFxyXG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICBjb25zdCBleGFtcGxlID0gbmV3IEV4YW1wbGUoZ2wsIHF1ZXJ5KTtcclxuICAgIGV4YW1wbGUucmVuZGVyKCk7XHJcbn1cclxuXHJcbndpbmRvdy5vbmVycm9yID0gc2hvd0Vycm9yO1xyXG5cclxubWFpbigpOyJdLCJuYW1lcyI6WyJpbml0U2hhZGVycyIsImdsIiwidnNoYWRlciIsImZzaGFkZXIiLCJwcm9ncmFtIiwidmVydGV4U2hhZGVyIiwibG9hZFNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImVycm9yIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJjb25zb2xlIiwibG9nIiwiZGVsZXRlUHJvZ3JhbSIsImRlbGV0ZVNoYWRlciIsInVzZVByb2dyYW0iLCJ0eXBlIiwic291cmNlIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsImNsZWFyQmFja2dyb3VuZCIsImNsZWFyQ29sb3IiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJjb252ZXJ0Q2xpZW50VG9XZWJHTFBvc2l0aW9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJ6IiwicmVjdCIsIngiLCJsZWZ0IiwiQ0FOVkFTIiwieSIsInRvcCIsImRyYXdQb2ludHNVc2VCdWZmZXIiLCJkcmF3VHlwZSIsIkVycm9yIiwicG9pbnRzIiwiRmxvYXQzMkFycmF5IiwiYnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsImxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImRyYXdBcnJheXMiLCJQT0lOVFMiLCJnZXRBcmMiLCJkZWdyZWUiLCJyYWQiLCJNYXRoIiwiUEkiLCJzaW5CIiwic2luIiwiY29zQiIsImNvcyIsImNvbG9yZnVsUG9pbnRzIiwicGVyUG9pbnRTaXplIiwiQllURVNfUEVSX0VMRU1FTlQiLCJwb3NpdGlvbkxvY2F0aW9uIiwiY29sb3JMb2NhdGlvbiIsImxvYWRUZXh0dXJlIiwibiIsImltYWdlIiwidGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTElORUFSIiwidGV4SW1hZ2UyRCIsIlJHQiIsIlVOU0lHTkVEX0JZVEUiLCJzYW1wbGVyTG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtMWkiLCJUUklBTkdMRV9TVFJJUCIsInJlbmRlcmVyIiwicG9pbnQiLCJjbGlja1BvaW50IiwiZG9jdW1lbnQiLCJvbmNsaWNrIiwiZSIsInBvaW50TG9jYXRpb24iLCJjYW52YXMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ2ZXJ0ZXhBdHRyaWIzZiIsImNsaWNrUG9pbnRzIiwiY2xpY2tlZFBvaW50cyIsInB1c2giLCJpIiwibGVuZ3RoIiwidHJpYW5nbGUiLCJUUklBTkdMRVMiLCJyb3RhdGVUcmlhbmdsZVVzZU1hdHJpeCIsInJvdGF0ZU1hdHJpeCIsImF0dHJpYnV0ZUxvY2F0aW9uIiwidW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybU1hdHJpeDRmdiIsInJvdGF0ZVRyaWFuZ2xlQW5pbWF0aW9uIiwibGFzdFRpbWUiLCJEYXRlIiwibm93IiwiY3VycmVudERlZ3JlZSIsImFuaW1hdGUiLCJkZWx0YSIsImdldE5leHRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNvbG9yZnVsVHJpYW5nbGUiLCJwb2ludHNNYXAiLCJQRVJfRUxFTUVOVF9TSVpFIiwidGV4dHVyZUxvY2F0aW9uIiwic2V0UG9pbnRzUG9zaXRpb24iLCJjYWxsYmFjayIsIkltYWdlIiwib25sb2FkIiwic3JjIiwibG9hZEltYWdlIiwibGlzdCIsInJlbmRlcmVyTGlzdCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwibGkiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsInNwbGl0IiwiYXBwZW5kQ2hpbGQiLCJzaG93UmVuZGVyZXJMaXN0IiwiT2JqZWN0Iiwia2V5cyIsIkV4YW1wbGUiLCJjb25zdHJ1Y3RvciIsInF1ZXJ5IiwidGhpcyIsIndoaWNoRXhhbXBsZSIsImdldCIsInJlbmRlciIsIndpbmRvdyIsIm9uZXJyb3IiLCJtZXNzYWdlIiwiZXJyb3JEaXYiLCJzdHlsZSIsImNvbG9yIiwiZ2V0Q29udGV4dCIsIlVSTFNlYXJjaFBhcmFtcyIsInNlYXJjaCIsIm1haW4iXSwic291cmNlUm9vdCI6IiJ9